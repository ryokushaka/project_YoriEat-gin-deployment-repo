name: Deploy to ECR and ECS
on:
  pull_request:
    types: [closed]
    branches:
      - main

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
  ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
  ECS_TASK_DEFINITION: ${{ secrets.ECS_TASK_DEFINITION }}

jobs:
  build:
    name: Deploy to ECR and ECS
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'ðŸ†— safe')

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Go environment
        uses: actions/setup-go@v3
        with:
          go-version: 1.22

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-${{ hashFiles('**/*.go') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-
            ${{ runner.os }}-go-

#      - name: Run tests
#        run: go test -v ./...

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Ensure the ECR repository exists
          aws ecr describe-repositories --repository-names ${ECR_REPOSITORY} || aws ecr create-repository --repository-name ${ECR_REPOSITORY}
          
          # Build and push the image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            --build-arg DB_HOST=${{ secrets.DB_HOST }} \
            --build-arg DB_PORT=${{ secrets.DB_PORT }} \
            --build-arg DB_NAME=${{ secrets.DB_NAME }} \
            --build-arg DB_USER=${{ secrets.DB_USER }} \
            --build-arg DB_SSLMODE=${{ secrets.DB_SSLMODE }} \
            --build-arg DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            --build-arg AWS_REGION=${{ secrets.AWS_REGION }} .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Update ECS task definition
        run: |
          # Get the current task definition
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION --query taskDefinition)
          
          # Update the image and add environment variables in the task definition
          NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "${{ steps.build-image.outputs.image }}" \
          --arg DB_HOST "${{ secrets.DB_HOST }}" \
          --arg DB_PORT "${{ secrets.DB_PORT }}" \
          --arg DB_NAME "${{ secrets.DB_NAME }}" \
          --arg DB_USER "${{ secrets.DB_USER }}" \
          --arg DB_SSLMODE "${{ secrets.DB_SSLMODE }}" \
          --arg DB_PASSWORD "${{ secrets.DB_PASSWORD }}" \
          '.containerDefinitions[0].image = $IMAGE |
            .containerDefinitions[0].environment += [
              {name: "DB_HOST", value: $DB_HOST},
              {name: "DB_PORT", value: $DB_PORT},
              {name: "DB_NAME", value: $DB_NAME},
              {name: "DB_USER", value: $DB_USER},
              {name: "DB_SSLMODE", value: $DB_SSLMODE},
              {name: "DB_PASSWORD", value: $DB_PASSWORD}
            ]')
          
          # Register the new task definition
          NEW_TASK_DEFINITION_ARN=$(aws ecs register-task-definition --family $ECS_TASK_DEFINITION --cli-input-json "$NEW_TASK_DEFINITION" --query taskDefinition.taskDefinitionArn --output text)
          
          if [ $? -ne 0 ]; then
          echo "Failed to register new task definition. Error code: $?"
          echo "Task Definition: $NEW_TASK_DEFINITION"
          exit 1
          fi

      - name: Update ECS service
        run: |
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --task-definition $NEW_TASK_DEFINITION_ARN --force-new-deployment
          
          if [ $? -ne 0 ]; then
            echo "Failed to update ECS service. Error code: $?"
            echo "Cluster: $ECS_CLUSTER"
            echo "Service: $ECS_SERVICE"
            echo "Task Definition ARN: $NEW_TASK_DEFINITION_ARN"
            exit 1
          fi

      - name: Verify deployment
        run: |
          echo "Waiting for service to be stable..."
          aws ecs wait services-stable --cluster $ECS_CLUSTER --services $ECS_SERVICE
          
          if [ $? -ne 0 ]; then
            echo "Service failed to stabilize. Error code: $?"
            echo "Cluster: $ECS_CLUSTER"
            echo "Service: $ECS_SERVICE"
            exit 1
          fi
          
          echo "Deployment completed successfully"